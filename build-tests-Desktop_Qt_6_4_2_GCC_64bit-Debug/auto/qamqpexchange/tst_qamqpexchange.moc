/****************************************************************************
** Meta object code from reading C++ file 'tst_qamqpexchange.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qamqpexchange.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_tst_QAMQPExchange_t {
    uint offsetsAndSizes[36];
    char stringdata0[18];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[8];
    char stringdata4[19];
    char stringdata5[14];
    char stringdata6[32];
    char stringdata7[27];
    char stringdata8[19];
    char stringdata9[21];
    char stringdata10[15];
    char stringdata11[24];
    char stringdata12[24];
    char stringdata13[16];
    char stringdata14[24];
    char stringdata15[23];
    char stringdata16[18];
    char stringdata17[18];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_tst_QAMQPExchange_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_tst_QAMQPExchange_t qt_meta_stringdata_tst_QAMQPExchange = {
    {
        QT_MOC_LITERAL(0, 17),  // "tst_QAMQPExchange"
        QT_MOC_LITERAL(18, 4),  // "init"
        QT_MOC_LITERAL(23, 0),  // ""
        QT_MOC_LITERAL(24, 7),  // "cleanup"
        QT_MOC_LITERAL(32, 18),  // "standardTypes_data"
        QT_MOC_LITERAL(51, 13),  // "standardTypes"
        QT_MOC_LITERAL(65, 31),  // "invalidStandardDeclaration_data"
        QT_MOC_LITERAL(97, 26),  // "invalidStandardDeclaration"
        QT_MOC_LITERAL(124, 18),  // "invalidDeclaration"
        QT_MOC_LITERAL(143, 20),  // "invalidRedeclaration"
        QT_MOC_LITERAL(164, 14),  // "removeIfUnused"
        QT_MOC_LITERAL(179, 23),  // "invalidMandatoryRouting"
        QT_MOC_LITERAL(203, 23),  // "invalidImmediateRouting"
        QT_MOC_LITERAL(227, 15),  // "confirmsSupport"
        QT_MOC_LITERAL(243, 23),  // "confirmDontLoseMessages"
        QT_MOC_LITERAL(267, 22),  // "passiveDeclareNotFound"
        QT_MOC_LITERAL(290, 17),  // "cleanupOnDeletion"
        QT_MOC_LITERAL(308, 17)   // "testQueuedPublish"
    },
    "tst_QAMQPExchange",
    "init",
    "",
    "cleanup",
    "standardTypes_data",
    "standardTypes",
    "invalidStandardDeclaration_data",
    "invalidStandardDeclaration",
    "invalidDeclaration",
    "invalidRedeclaration",
    "removeIfUnused",
    "invalidMandatoryRouting",
    "invalidImmediateRouting",
    "confirmsSupport",
    "confirmDontLoseMessages",
    "passiveDeclareNotFound",
    "cleanupOnDeletion",
    "testQueuedPublish"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_tst_QAMQPExchange[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  110,    2, 0x08,    1 /* Private */,
       3,    0,  111,    2, 0x08,    2 /* Private */,
       4,    0,  112,    2, 0x08,    3 /* Private */,
       5,    0,  113,    2, 0x08,    4 /* Private */,
       6,    0,  114,    2, 0x08,    5 /* Private */,
       7,    0,  115,    2, 0x08,    6 /* Private */,
       8,    0,  116,    2, 0x08,    7 /* Private */,
       9,    0,  117,    2, 0x08,    8 /* Private */,
      10,    0,  118,    2, 0x08,    9 /* Private */,
      11,    0,  119,    2, 0x08,   10 /* Private */,
      12,    0,  120,    2, 0x08,   11 /* Private */,
      13,    0,  121,    2, 0x08,   12 /* Private */,
      14,    0,  122,    2, 0x08,   13 /* Private */,
      15,    0,  123,    2, 0x08,   14 /* Private */,
      16,    0,  124,    2, 0x08,   15 /* Private */,
      17,    0,  125,    2, 0x08,   16 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject tst_QAMQPExchange::staticMetaObject = { {
    QMetaObject::SuperData::link<TestCase::staticMetaObject>(),
    qt_meta_stringdata_tst_QAMQPExchange.offsetsAndSizes,
    qt_meta_data_tst_QAMQPExchange,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_tst_QAMQPExchange_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<tst_QAMQPExchange, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanup'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'standardTypes_data'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'standardTypes'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidStandardDeclaration_data'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidStandardDeclaration'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidDeclaration'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidRedeclaration'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'removeIfUnused'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidMandatoryRouting'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidImmediateRouting'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'confirmsSupport'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'confirmDontLoseMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'passiveDeclareNotFound'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupOnDeletion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testQueuedPublish'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void tst_QAMQPExchange::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<tst_QAMQPExchange *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->standardTypes_data(); break;
        case 3: _t->standardTypes(); break;
        case 4: _t->invalidStandardDeclaration_data(); break;
        case 5: _t->invalidStandardDeclaration(); break;
        case 6: _t->invalidDeclaration(); break;
        case 7: _t->invalidRedeclaration(); break;
        case 8: _t->removeIfUnused(); break;
        case 9: _t->invalidMandatoryRouting(); break;
        case 10: _t->invalidImmediateRouting(); break;
        case 11: _t->confirmsSupport(); break;
        case 12: _t->confirmDontLoseMessages(); break;
        case 13: _t->passiveDeclareNotFound(); break;
        case 14: _t->cleanupOnDeletion(); break;
        case 15: _t->testQueuedPublish(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *tst_QAMQPExchange::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QAMQPExchange::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QAMQPExchange.stringdata0))
        return static_cast<void*>(this);
    return TestCase::qt_metacast(_clname);
}

int tst_QAMQPExchange::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = TestCase::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 16;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
