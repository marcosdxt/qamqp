/****************************************************************************
** Meta object code from reading C++ file 'tst_qamqpqueue.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qamqpqueue.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_tst_QAMQPQueue_t {
    uint offsetsAndSizes[72];
    char stringdata0[15];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[8];
    char stringdata4[16];
    char stringdata5[23];
    char stringdata6[18];
    char stringdata7[24];
    char stringdata8[19];
    char stringdata9[12];
    char stringdata10[8];
    char stringdata11[16];
    char stringdata12[17];
    char stringdata13[9];
    char stringdata14[7];
    char stringdata15[15];
    char stringdata16[14];
    char stringdata17[11];
    char stringdata18[12];
    char stringdata19[6];
    char stringdata20[26];
    char stringdata21[26];
    char stringdata22[7];
    char stringdata23[33];
    char stringdata24[39];
    char stringdata25[9];
    char stringdata26[4];
    char stringdata27[29];
    char stringdata28[10];
    char stringdata29[11];
    char stringdata30[4];
    char stringdata31[18];
    char stringdata32[20];
    char stringdata33[18];
    char stringdata34[13];
    char stringdata35[18];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_tst_QAMQPQueue_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_tst_QAMQPQueue_t qt_meta_stringdata_tst_QAMQPQueue = {
    {
        QT_MOC_LITERAL(0, 14),  // "tst_QAMQPQueue"
        QT_MOC_LITERAL(15, 4),  // "init"
        QT_MOC_LITERAL(20, 0),  // ""
        QT_MOC_LITERAL(21, 7),  // "cleanup"
        QT_MOC_LITERAL(29, 15),  // "defaultExchange"
        QT_MOC_LITERAL(45, 22),  // "standardExchanges_data"
        QT_MOC_LITERAL(68, 17),  // "standardExchanges"
        QT_MOC_LITERAL(86, 23),  // "invalidDeclaration_data"
        QT_MOC_LITERAL(110, 18),  // "invalidDeclaration"
        QT_MOC_LITERAL(129, 11),  // "invalidBind"
        QT_MOC_LITERAL(141, 7),  // "unnamed"
        QT_MOC_LITERAL(149, 15),  // "exclusiveAccess"
        QT_MOC_LITERAL(165, 16),  // "exclusiveRemoval"
        QT_MOC_LITERAL(182, 8),  // "notFound"
        QT_MOC_LITERAL(191, 6),  // "remove"
        QT_MOC_LITERAL(198, 14),  // "removeIfUnused"
        QT_MOC_LITERAL(213, 13),  // "removeIfEmpty"
        QT_MOC_LITERAL(227, 10),  // "bindUnbind"
        QT_MOC_LITERAL(238, 11),  // "delayedBind"
        QT_MOC_LITERAL(250, 5),  // "purge"
        QT_MOC_LITERAL(256, 25),  // "canOnlyStartConsumingOnce"
        QT_MOC_LITERAL(282, 25),  // "ensureConsumeOnlySentOnce"
        QT_MOC_LITERAL(308, 6),  // "cancel"
        QT_MOC_LITERAL(315, 32),  // "invalidCancelBecauseNotConsuming"
        QT_MOC_LITERAL(348, 38),  // "invalidCancelBecauseInvalidCo..."
        QT_MOC_LITERAL(387, 8),  // "getEmpty"
        QT_MOC_LITERAL(396, 3),  // "get"
        QT_MOC_LITERAL(400, 28),  // "verifyContentEncodingIssue33"
        QT_MOC_LITERAL(429, 9),  // "defineQos"
        QT_MOC_LITERAL(439, 10),  // "invalidQos"
        QT_MOC_LITERAL(450, 3),  // "qos"
        QT_MOC_LITERAL(454, 17),  // "invalidRoutingKey"
        QT_MOC_LITERAL(472, 19),  // "tableFieldDataTypes"
        QT_MOC_LITERAL(492, 17),  // "messageProperties"
        QT_MOC_LITERAL(510, 12),  // "emptyMessage"
        QT_MOC_LITERAL(523, 17)   // "cleanupOnDeletion"
    },
    "tst_QAMQPQueue",
    "init",
    "",
    "cleanup",
    "defaultExchange",
    "standardExchanges_data",
    "standardExchanges",
    "invalidDeclaration_data",
    "invalidDeclaration",
    "invalidBind",
    "unnamed",
    "exclusiveAccess",
    "exclusiveRemoval",
    "notFound",
    "remove",
    "removeIfUnused",
    "removeIfEmpty",
    "bindUnbind",
    "delayedBind",
    "purge",
    "canOnlyStartConsumingOnce",
    "ensureConsumeOnlySentOnce",
    "cancel",
    "invalidCancelBecauseNotConsuming",
    "invalidCancelBecauseInvalidConsumerTag",
    "getEmpty",
    "get",
    "verifyContentEncodingIssue33",
    "defineQos",
    "invalidQos",
    "qos",
    "invalidRoutingKey",
    "tableFieldDataTypes",
    "messageProperties",
    "emptyMessage",
    "cleanupOnDeletion"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_tst_QAMQPQueue[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      34,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  218,    2, 0x08,    1 /* Private */,
       3,    0,  219,    2, 0x08,    2 /* Private */,
       4,    0,  220,    2, 0x08,    3 /* Private */,
       5,    0,  221,    2, 0x08,    4 /* Private */,
       6,    0,  222,    2, 0x08,    5 /* Private */,
       7,    0,  223,    2, 0x08,    6 /* Private */,
       8,    0,  224,    2, 0x08,    7 /* Private */,
       9,    0,  225,    2, 0x08,    8 /* Private */,
      10,    0,  226,    2, 0x08,    9 /* Private */,
      11,    0,  227,    2, 0x08,   10 /* Private */,
      12,    0,  228,    2, 0x08,   11 /* Private */,
      13,    0,  229,    2, 0x08,   12 /* Private */,
      14,    0,  230,    2, 0x08,   13 /* Private */,
      15,    0,  231,    2, 0x08,   14 /* Private */,
      16,    0,  232,    2, 0x08,   15 /* Private */,
      17,    0,  233,    2, 0x08,   16 /* Private */,
      18,    0,  234,    2, 0x08,   17 /* Private */,
      19,    0,  235,    2, 0x08,   18 /* Private */,
      20,    0,  236,    2, 0x08,   19 /* Private */,
      21,    0,  237,    2, 0x08,   20 /* Private */,
      22,    0,  238,    2, 0x08,   21 /* Private */,
      23,    0,  239,    2, 0x08,   22 /* Private */,
      24,    0,  240,    2, 0x08,   23 /* Private */,
      25,    0,  241,    2, 0x08,   24 /* Private */,
      26,    0,  242,    2, 0x08,   25 /* Private */,
      27,    0,  243,    2, 0x08,   26 /* Private */,
      28,    0,  244,    2, 0x08,   27 /* Private */,
      29,    0,  245,    2, 0x08,   28 /* Private */,
      30,    0,  246,    2, 0x08,   29 /* Private */,
      31,    0,  247,    2, 0x08,   30 /* Private */,
      32,    0,  248,    2, 0x08,   31 /* Private */,
      33,    0,  249,    2, 0x08,   32 /* Private */,
      34,    0,  250,    2, 0x08,   33 /* Private */,
      35,    0,  251,    2, 0x08,   34 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject tst_QAMQPQueue::staticMetaObject = { {
    QMetaObject::SuperData::link<TestCase::staticMetaObject>(),
    qt_meta_stringdata_tst_QAMQPQueue.offsetsAndSizes,
    qt_meta_data_tst_QAMQPQueue,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_tst_QAMQPQueue_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<tst_QAMQPQueue, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanup'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'defaultExchange'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'standardExchanges_data'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'standardExchanges'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidDeclaration_data'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidDeclaration'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidBind'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'unnamed'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'exclusiveAccess'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'exclusiveRemoval'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'notFound'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'remove'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'removeIfUnused'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'removeIfEmpty'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'bindUnbind'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'delayedBind'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'purge'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'canOnlyStartConsumingOnce'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ensureConsumeOnlySentOnce'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cancel'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidCancelBecauseNotConsuming'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidCancelBecauseInvalidConsumerTag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'getEmpty'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'get'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'verifyContentEncodingIssue33'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'defineQos'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidQos'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'qos'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'invalidRoutingKey'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'tableFieldDataTypes'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'messageProperties'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'emptyMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupOnDeletion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void tst_QAMQPQueue::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<tst_QAMQPQueue *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->defaultExchange(); break;
        case 3: _t->standardExchanges_data(); break;
        case 4: _t->standardExchanges(); break;
        case 5: _t->invalidDeclaration_data(); break;
        case 6: _t->invalidDeclaration(); break;
        case 7: _t->invalidBind(); break;
        case 8: _t->unnamed(); break;
        case 9: _t->exclusiveAccess(); break;
        case 10: _t->exclusiveRemoval(); break;
        case 11: _t->notFound(); break;
        case 12: _t->remove(); break;
        case 13: _t->removeIfUnused(); break;
        case 14: _t->removeIfEmpty(); break;
        case 15: _t->bindUnbind(); break;
        case 16: _t->delayedBind(); break;
        case 17: _t->purge(); break;
        case 18: _t->canOnlyStartConsumingOnce(); break;
        case 19: _t->ensureConsumeOnlySentOnce(); break;
        case 20: _t->cancel(); break;
        case 21: _t->invalidCancelBecauseNotConsuming(); break;
        case 22: _t->invalidCancelBecauseInvalidConsumerTag(); break;
        case 23: _t->getEmpty(); break;
        case 24: _t->get(); break;
        case 25: _t->verifyContentEncodingIssue33(); break;
        case 26: _t->defineQos(); break;
        case 27: _t->invalidQos(); break;
        case 28: _t->qos(); break;
        case 29: _t->invalidRoutingKey(); break;
        case 30: _t->tableFieldDataTypes(); break;
        case 31: _t->messageProperties(); break;
        case 32: _t->emptyMessage(); break;
        case 33: _t->cleanupOnDeletion(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *tst_QAMQPQueue::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QAMQPQueue::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QAMQPQueue.stringdata0))
        return static_cast<void*>(this);
    return TestCase::qt_metacast(_clname);
}

int tst_QAMQPQueue::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = TestCase::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 34)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 34;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 34)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 34;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
